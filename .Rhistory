source('~/Documents/social_forage_new/optim.R', echo=TRUE)
source('~/Documents/social_forage_new/optim.R', echo=TRUE)
source('~/Documents/social_forage_new/optim.R', echo=TRUE)
source('~/Documents/social_forage_new/optim.R', echo=TRUE)
source('~/Documents/social_forage_new/optim.R', echo=TRUE)
source('~/Documents/social_forage_new/optim.R', echo=TRUE)
source('~/Documents/social_forage_new/optim.R', echo=TRUE)
source('~/Documents/social_forage_new/optim.R', echo=TRUE)
source('~/Documents/social_forage_new/optim.R', echo=TRUE)
source("RL.R")
source("RLSocial.R")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
# output dir
dir.create("figures")
# simulation parameters
nSub = 32
source("RL.R")
source("RLSocial.R")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
# output dir
dir.create("figures")
# simulation parameters
nSub = 32
# non_social
totalEarnings_ = vector(nSub)
sIdx =1
source("RL.R")
source("RLSocial.R")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
# output dir
dir.create("figures")
# simulation parameters
nSub = 32
# non_social
totalEarnings_ = vector(length = nSub)
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
source("RL.R")
source("RLSocial.R")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
# output dir
dir.create("figures")
# simulation parameters
nSub = 32
# non_social
totalEarnings_ = vector(length = nSub)
# create the ht sequences in two conditions
htSeq_ = lapply(1 : nCondition, function(i) {
condition = conditions[i]
tempt = as.vector(replicate(nChunkMax, sample(hts_[[condition]], chunkSize)))
tempt[1 : nTrialMax]
})
# output dir
dir.create("figures")
# simulation parameters
nSub = 32
# non_social
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
# create the ht sequences in two conditions
htSeq_ = lapply(1 : nCondition, function(i) {
condition = conditions[i]
tempt = as.vector(replicate(nChunkMax, sample(hts_[[condition]], chunkSize)))
tempt[1 : nTrialMax]
})
# load expPara
load("expParas.RData")
# create the ht sequences in two conditions
htSeq_ = lapply(1 : nCondition, function(i) {
condition = conditions[i]
tempt = as.vector(replicate(nChunkMax, sample(hts_[[condition]], chunkSize)))
tempt[1 : nTrialMax]
})
htSeq_
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
# non_social
totalEarnings_ = vector(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
totalEarnings_[sIdx] = sum(RLResults$trialEarnings)
}
acceptMatrix = apply(acceptMatrix_, MARGIN = c(1,2), FUN = function(x) mean(x, rm.na = T))
plotData = data.frame(t(acceptMatrix)); colnames(plotData) =  paste(unqHts); plotData$time = tGrid
plotData$condition = rep(conditions, each = nT / 2)
hist(totalEarnings_)
hist(totalEarnings_)
blockSec
optimLongRunRate_
source("RL.R")
source("RLSocial.R")
library("ggplot2")
library("dplyr")
library("tidyr")
source("subFxs/plotThemes.R")
# load expPara
load("expParas.RData")
# create the ht sequences in two conditions
htSeq_ = lapply(1 : nCondition, function(i) {
condition = conditions[i]
tempt = as.vector(replicate(nChunkMax, sample(hts_[[condition]], chunkSize)))
tempt[1 : nTrialMax]
})
# output dir
dir.create("figures")
# simulation parameters
nSub = 32
# non_social
richRwdRates = vector(length = nSub)
poorRwdRates = vector(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
richRwdRates[sIdx] = sum(RLResults$trialEarnings[RLResults$condition == "rich"]) / blockSec
poorRwdRates[sIdx] = sum(RLResults$trialEarnings[RLResults$condition == "poor"]) / blockSec
}
poorRwdRates
hist(  poorRwdRates)
hist(richRwdRates)
optimLongRunRate_
hist(  poorRwdRates)
# non_social
richRwdRates = vector(length = nSub)
poorRwdRates = vector(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.03)
tau = runif(1, 5, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
richRwdRates[sIdx] = sum(RLResults$trialEarnings[RLResults$condition == "rich"]) / blockSec
poorRwdRates[sIdx] = sum(RLResults$trialEarnings[RLResults$condition == "poor"]) / blockSec
}
hist(poorRwdRates)
hist(richRwdRates)
# non_social
richRwdRates = vector(length = nSub)
poorRwdRates = vector(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 5, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
richRwdRates[sIdx] = sum(RLResults$trialEarnings[RLResults$condition == "rich"]) / blockSec
poorRwdRates[sIdx] = sum(RLResults$trialEarnings[RLResults$condition == "poor"]) / blockSec
}
hist(poorRwdRates)
hist(richRwdRates)
hist(poorRwdRates)
hist(richRwdRates)
# non_social
richRwdRates = vector(length = nSub)
poorRwdRates = vector(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 2, 10)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
richRwdRates[sIdx] = sum(RLResults$trialEarnings[RLResults$condition == "rich"]) / blockSec
poorRwdRates[sIdx] = sum(RLResults$trialEarnings[RLResults$condition == "poor"]) / blockSec
}
hist(poorRwdRates)
hist(richRwdRates)
conditions
source("RL.R")
source("RLSocial.R")
library("ggplot2")
library("dplyr")
library("tidyr")
library("lme4")
source("subFxs/plotThemes.R")
# load expParas
load("expParas.RData")
# output dir
dir.create("figures")
# read in parameters
para = read.csv("para.csv")
# reward constants
ctxRwd = 40.1
nCtx = 6
rwds = c(probRwds, rep(ctxRwd, nCtx)) # all possible rewards
unqRwds = unique(rwds) # all unique rewards
set.seed(123)
rwd_ = as.vector( replicate(nChunkMax, sample(rwds)) )
rwd_ = rwd_[1 : nTrialMax]
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.01, 0.2)
tau = runif(1, 0.1, 2)
iniLongRunRate = runif(1, 3 / ht, 18 / ht)
thisResults = RL(beta, tau, iniLongRunRate, ctxRwd, rwd_)
RLResults_[[sIdx]] = thisResults
}
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$requiredHt == ht, 1, 0)
pastEarnings1 = c(NA, head(RLResults$rwd, -1))
data = data.frame(
action,
pastEarnings1,
rwd = RLResults$rwd
)
}
)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
# summarise pAccept for different reward sizes and different past earnings
sumData = data %>%
group_by(rwd, pastEarnings1) %>% summarise(sum(action) / length(action))
colnames(sumData) = c("rwd", "pastEarnings1", "pAccept")
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.01, 0.2)
tau = runif(1, 0.1, 2)
iniLongRunRate = runif(1, 3 / ht, 18 / ht)
thisResults = RL(beta, tau, iniLongRunRate, ctxRwd, rwd_)
RLResults_[[sIdx]] = thisResults
}
rm(list = ls())
source("RL.R")
source("RLSocial.R")
library("ggplot2")
library("dplyr")
library("tidyr")
library("lme4")
source("subFxs/plotThemes.R")
# load expParas
load("expParas.RData")
# output dir
dir.create("figures")
rwd
rwd / max(unqHts)
optimLongRunRate_
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.01, 0.2)
tau = runif(1, 0.1, 2)
iniLongRunRate = runif(1, rwd / (max(unqHts) + iti), rwd / min(unqHts))
thisResults = RL(beta, tau, iniLongRunRate, ctxRwd, rwd_)
RLResults_[[sIdx]] = thisResults
}
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
thisResults = RL(beta, tau, iniLongRunRate, ctxRwd, rwd_)
RLResults_[[sIdx]] = thisResults
}
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
RLResults_[[sIdx]] =  RLResults
}
# create the ht sequences in two conditions
htSeq_ = lapply(1 : nCondition, function(i) {
condition = conditions[i]
tempt = as.vector(replicate(nChunkMax, sample(hts_[[condition]], chunkSize)))
tempt[1 : nTrialMax]
})
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
RLResults_[[sIdx]] =  RLResults
}
RLResults$trialEarnings
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
rwd = RLResults$rwd
)
}
)
ifelse(RLResults$trialEarnings > 0, 1, 0)
head(RLResults$trialEarnings, -1)
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt
)
}
)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
sumData = data %>%
group_by(scheduledHt, pastEarnings1) %>% summarise(sum(action) / length(action))
colnames(sumData) = c("rwd", "pastEarnings1", "pAccept")
source('~/Documents/social_forage_new/pAccept_group.R', echo=TRUE)
# summarise pAccept for different reward sizes and different past earnings
sumData = data %>%
group_by(scheduledHt, pastEarnings1) %>% summarise(sum(action) / length(action))
# summarise pAccept for different reward sizes and different past earnings
sumData = data %>%
group_by(ht, pastEarnings1) %>% summarise(sum(action) / length(action))
colnames(sumData) = c("rwd", "pastEarnings1", "pAccept")
sumData
fit1 = glm(pAccept~rwd,
data = sumData, family = binomial)
summary(fit1)
# regression with reward sizes
fit1 = glm(pAccept~ht
data = sumData, family = binomial)
summary(fit1)
fit1 = glm(pAccept~ht
data = sumData, family = binomial)
# regression with reward sizes
fit1 = glm(pAccept~ht,
data = sumData, family = binomial)
summary(fit1)
fit1 = glm(pAccept~ht,
data = sumData, family = binomial)
sumData
data %>%
group_by(ht, pastEarnings1) %>% summarise(sum(action) / length(action))
colnames(sumData) = c("ht", "pastEarnings1", "pAccept")
fit1 = glm(pAccept~ht,
data = sumData, family = binomial)
summary(fit1)
# plot the effect of reward sizes
sumData %>% ggplot(aes(factor(pastEarnings1), pAccept)) +
geom_bar(stat = "identity") + facet_wrap(~rwd) + myTheme +
xlab("Last trial earnings")
# plot the effect of reward sizes
sumData %>% ggplot(aes(factor(pastEarnings1), pAccept)) +
geom_bar(stat = "identity") + facet_wrap(~ht) + myTheme +
xlab("Last trial earnings")
data %>% group_by(ht) %>% summarise(pAccept = sum(action) / length(action)) %>%
ggplot(aes(ht, pAccept)) + geom_point() + myTheme +
geom_line(data = fitData, aes(x, y), linetype = "dashed")
x = seq(0, max(unqHts), by = 1)
fitData = data.frame(
x,
y = exp(fit1$coefficients[1] + fit1$coefficients[2] * x) /
(1 + exp(fit1$coefficients[1] + fit1$coefficients[2] * x))
)
data %>% group_by(ht) %>% summarise(pAccept = sum(action) / length(action)) %>%
ggplot(aes(ht, pAccept)) + geom_point() + myTheme +
geom_line(data = fitData, aes(x, y), linetype = "dashed")
fit1 = glm(pAccept~ht,
data = sumData, family = binomial)
summary(fit1)
sumData = data %>%
group_by(ht, pastEarnings1) %>% summarise(sum(action) / length(action))
colnames(sumData) = c("ht", "pastEarnings1", "pAccept")
# regression with reward sizes, probably not significant right?
fit1 = glm(pAccept~ht,
data = sumData, family = binomial)
summary(fit1)
x = seq(0, max(unqHts), by = 1)
data %>% group_by(ht) %>% summarise(pAccept = sum(action) / length(action)) %>%
ggplot(aes(ht, pAccept)) + geom_bar(stat = "identity") + myTheme
sumData = data %>%
group_by(ht, pastEarnings1) %>% summarise(sum(action) / length(action))
colnames(sumData) = c("ht", "pastEarnings1", "pAccept")
# summarise pAccept for different reward sizes and different past earnings
sumData
x = seq(0, max(unqHts), by = 1)
data %>% group_by(ht) %>% summarise(pAccept = sum(action) / length(action)) %>%
ggplot(aes(ht, pAccept)) + geom_bar(stat = "identity") + myTheme
data
View(data)
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
rep(i, length = length(action))
i
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
i
i = 1
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
nSub
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
RLResults_[[sIdx]] =  RLResults
}
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action))
# plot the effect of reward sizes
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summairse(mu = mean(pAccept), se = sd(pAccept) / sqrt(length(pAccept)))
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept), se = sd(pAccept) / sqrt(length(pAccept)))
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max))
# plot the effect of reward sizes
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 0.2))
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
