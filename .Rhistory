sumData %>% ggplot(aes(factor(pastEarnings1), pAccept)) +
geom_bar(stat = "identity") + facet_wrap(~rwd) + myTheme +
xlab("Last trial earnings")
# plot the effect of reward sizes
sumData %>% ggplot(aes(factor(pastEarnings1), pAccept)) +
geom_bar(stat = "identity") + facet_wrap(~ht) + myTheme +
xlab("Last trial earnings")
data %>% group_by(ht) %>% summarise(pAccept = sum(action) / length(action)) %>%
ggplot(aes(ht, pAccept)) + geom_point() + myTheme +
geom_line(data = fitData, aes(x, y), linetype = "dashed")
x = seq(0, max(unqHts), by = 1)
fitData = data.frame(
x,
y = exp(fit1$coefficients[1] + fit1$coefficients[2] * x) /
(1 + exp(fit1$coefficients[1] + fit1$coefficients[2] * x))
)
data %>% group_by(ht) %>% summarise(pAccept = sum(action) / length(action)) %>%
ggplot(aes(ht, pAccept)) + geom_point() + myTheme +
geom_line(data = fitData, aes(x, y), linetype = "dashed")
fit1 = glm(pAccept~ht,
data = sumData, family = binomial)
summary(fit1)
sumData = data %>%
group_by(ht, pastEarnings1) %>% summarise(sum(action) / length(action))
colnames(sumData) = c("ht", "pastEarnings1", "pAccept")
# regression with reward sizes, probably not significant right?
fit1 = glm(pAccept~ht,
data = sumData, family = binomial)
summary(fit1)
x = seq(0, max(unqHts), by = 1)
data %>% group_by(ht) %>% summarise(pAccept = sum(action) / length(action)) %>%
ggplot(aes(ht, pAccept)) + geom_bar(stat = "identity") + myTheme
sumData = data %>%
group_by(ht, pastEarnings1) %>% summarise(sum(action) / length(action))
colnames(sumData) = c("ht", "pastEarnings1", "pAccept")
# summarise pAccept for different reward sizes and different past earnings
sumData
x = seq(0, max(unqHts), by = 1)
data %>% group_by(ht) %>% summarise(pAccept = sum(action) / length(action)) %>%
ggplot(aes(ht, pAccept)) + geom_bar(stat = "identity") + myTheme
data
View(data)
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
rep(i, length = length(action))
i
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
i
i = 1
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
nSub
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
RLResults_[[sIdx]] =  RLResults
}
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action))
# plot the effect of reward sizes
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summairse(mu = mean(pAccept), se = sd(pAccept) / sqrt(length(pAccept)))
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept), se = sd(pAccept) / sqrt(length(pAccept)))
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max))
# plot the effect of reward sizes
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 0.2))
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
source('~/Documents/social_forage_new/learnCurve.R', echo=TRUE)
source("RL.R")
source("RLSocial.R")
library("ggplot2")
library("dplyr")
library("tidyr")
library("lme4")
source("subFxs/plotThemes.R")
# load expParas
load("expParas.RData")
# output dir
dir.create("figures")
# create the ht sequences in two conditions
htSeq_ = lapply(1 : nCondition, function(i) {
condition = conditions[i]
tempt = as.vector(replicate(nChunkMax, sample(hts_[[condition]], chunkSize)))
tempt[1 : nTrialMax]
})
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
RLResults_[[sIdx]] =  RLResults
}
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
data = data.frame(
action,
pastEarnings1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
# plot the effect of reward sizes
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
dfList
str(dfList)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
str(data)
# plot the effect of reward sizes
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastEarnings1) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(pastEarnings1, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastEarnings1) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se)
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastEarnings) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se)
str(data)
pastHt1 = c(NA, head(RLResults$spentHt, -1) + iti)
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
pastHt1 = c(NA, head(RLResults$spentHt, -1) + iti)
data = data.frame(
action = action,
pastEarninings = pastEarnings1,
pastRwdRate = pastEarnings1 / pastHt1
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
pastHt1 = c(NA, head(RLResults$spentHt, -1) + iti)
data = data.frame(
action = action,
pastEarninings = pastEarnings1,
pastRwdRate = pastEarnings1 / pastHt1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
# plot the effect of reward sizes
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
# plot the effect of past earnings
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastRwdRate) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(pastRwdRate, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
str(data)
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastRwdRate) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se)
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action))
data %>% group_by(pastRwdRate, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastRwdRate) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se)
data %>% group_by(pastRwdRate, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastRwdRate) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(pastRwdRate, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
data %>% group_by(pastRwdRate, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastRwdRate) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se)
data %>% group_by(pastRwdRate, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastRwdRate) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(pastRwdRate, mu)) + geom_bar(stat = "identity") + myTheme
source("RL.R")
source("RLSocial.R")
library("ggplot2")
library("dplyr")
library("tidyr")
library("lme4")
source("subFxs/plotThemes.R")
# load expParas
load("expParas.RData")
# output dir
dir.create("figures")
# create the ht sequences in two conditions
htSeq_ = lapply(1 : nCondition, function(i) {
condition = conditions[i]
tempt = as.vector(replicate(nChunkMax, sample(hts_[[condition]], chunkSize)))
tempt[1 : nTrialMax]
})
# simulate non_social data
nSub = 64
RLResults_ = list(length = nSub)
for(sIdx in 1 : nSub){
beta = runif(1, 0.001, 0.01)
tau = runif(1, 10, 15)
iniLongRunRate = runif(1, 0.15, 1)
RLResults = RL(beta, tau, iniLongRunRate, htSeq_)
RLResults_[[sIdx]] =  RLResults
}
# prepare data
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
pastHt1 = c(NA, head(RLResults$spentHt, -1) + iti)
data = data.frame(
action = action,
pastEarninings = pastEarnings1,
pastRwdRate = pastEarnings1 / pastHt1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
str(dfList)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
# plot the effect of reward sizes
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
# plot the effect of reward sizes
# make sure to average within each participant first. And use se across participants
data %>% group_by(ht, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(ht) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(ht, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
# plot the effect of past earnings
data %>% group_by(pastRwdRate, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastRwdRate) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(pastRwdRate, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 1))
# plot the effect of past earnings
data %>% group_by(pastRwdRate, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastRwdRate) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(pastRwdRate, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 0.05))
# plot the effect of past earnings
data %>% group_by(pastRwdRate, subId) %>% summarise(pAccept = sum(action) / length(action)) %>%
group_by(pastRwdRate) %>% summarise(mu = mean(pAccept),
se = sd(pAccept) / sqrt(length(pAccept)),
min = mu - se,
max = mu + se) %>%
ggplot(aes(pastRwdRate, mu)) + geom_bar(stat = "identity") + myTheme +
geom_errorbar(aes(ymin = min, ymax = max, width = 0.01))
a = RLResults$spentHt
a
head(c(1,1,3), -1)
# concatenate
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
pastHt1 = c(NA, head(RLResults$spentHt, -1) + iti)
junk = c(2, iti + head(spentHt, -1)) # time increment before each decision
time_since_last_rwd = cumsum(junk)
data = data.frame(
action = action,
pastEarninings = pastEarnings1,
time_since_last_rwd = time_since_last_rwd
pastRwdRate = pastEarnings1 / pastHt1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
# concatenate
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
pastHt1 = c(NA, head(RLResults$spentHt, -1) + iti)
junk = c(2, iti + head(spentHt, -1)) # time increment before each decision
time_since_last_rwd = cumsum(junk)
data = data.frame(
action = action,
pastEarninings = pastEarnings1,
time_since_last_rwd = time_since_last_rwd,
pastRwdRate = pastEarnings1 / pastHt1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
data = bind_rows(dfList)
data = data[apply(data, MARGIN = 1, FUN = function(x) all(!is.na(x))),]
time_since_last_rwd
time_since_last_rwd
junk
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
pastHt1 = c(NA, head(RLResults$spentHt, -1) + iti)
junk = c(2, iti + head(spentHt, -1)) # time increment before each decision
time_since_last_rwd = cumsum(junk)
data = data.frame(
action = action,
pastEarninings = pastEarnings1,
time_since_last_rwd = time_since_last_rwd,
pastRwdRate = pastEarnings1 / pastHt1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
dfList = lapply(1 : nSub, function(i) {
RLResults = RLResults_[[i]]
action = ifelse(RLResults$trialEarnings > 0, 1, 0)
pastEarnings1 = c(NA, head(RLResults$trialEarnings, -1))
pastHt1 = c(NA, head(RLResults$spentHt, -1) + iti)
junk = c(2, iti + head(RLResults$spentHt, -1)) # time increment before each decision
time_since_last_rwd = cumsum(junk)
data = data.frame(
action = action,
pastEarninings = pastEarnings1,
time_since_last_rwd = time_since_last_rwd,
pastRwdRate = pastEarnings1 / pastHt1,
ht = RLResults$scheduledHt,
subId  = rep(i, length = length(action))
)
}
)
time_since_last_rwd
dfList[[1]]
a = dfList[[1]]
a$time_since_last_rwd
ht4rwd = RLResults$spentHt
ht4rwd
ht4rwd = RLResults$spentHt + iti
ht4rwd
spentTime = RLResults$spentHt + iti
spentTime
DT = data.table(grp=rep(c("A", "B", "C", "A", "B"), c(2,2,3,1,2)), value=1:10)
rleid(DT$grp) # get run-length ids
install.packages("data.table")
library("data.table")
DT = data.table(grp=rep(c("A", "B", "C", "A", "B"), c(2,2,3,1,2)), value=1:10)
rleid(DT$grp) # get run-length ids
split(spentTime, spentTime != 4)
x <- rev(rep(6:10, 1:5))
x
a = data.table(spentTime)
a
relid(a)
rleid(a)
a
type(a)
rleid(a$spentTime)
vec <- c(0,1,0,0,0,1,1,1,0,1,1)
rleid(vec)
rleid(vec > 0)
vec > 0
set.seed(201)
rnums = rnorm(100)
runs = rle(rnums > 0)
runs
myruns = which(runs$values == TRUE & runs$lengths >= 5)
myruns
cumsum(runs$lengths)
cumsum( spentTime == 0)
cumsum( spentTime == 4)
cumsum( spentTime != 4)
ave(spentTime, cumsum(spentTime != 4), FUN = cumsum)
